#!/usr/bin/env node
'use strict';var yargs=require('yargs'),fs=require('fs/promises'),readline=require('readline-sync'),path=require('path'),axios=require('axios'),rimraf=require('rimraf'),md5=require('crypto-js/md5');function _interopDefaultLegacy(e){return e&&typeof e==='object'&&'default'in e?e:{'default':e}}var yargs__default=/*#__PURE__*/_interopDefaultLegacy(yargs);var fs__default=/*#__PURE__*/_interopDefaultLegacy(fs);var readline__default=/*#__PURE__*/_interopDefaultLegacy(readline);var path__default=/*#__PURE__*/_interopDefaultLegacy(path);var axios__default=/*#__PURE__*/_interopDefaultLegacy(axios);var rimraf__default=/*#__PURE__*/_interopDefaultLegacy(rimraf);var md5__default=/*#__PURE__*/_interopDefaultLegacy(md5);/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}function createDirectory(filePath) {
    return __awaiter(this, void 0, void 0, function* () {
        var dirname = path__default["default"].dirname(filePath);
        try {
            yield fs__default["default"].access(dirname);
            return dirname;
        }
        catch (e) {
            return fs__default["default"].mkdir(dirname, { recursive: true });
        }
    });
}
function removeStartingSlash(str) {
    if (str.startsWith('/') || str.startsWith('\\')) {
        str = str.slice(1);
    }
    return str;
}
function removeDir(path) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise((resolve, reject) => {
            rimraf__default["default"](path, e => {
                if (e) {
                    reject();
                }
                else {
                    resolve();
                }
            });
        });
    });
}const APP_DIRNAME = 'src';
const CONFIG_DIRNAME = '.ws';const DEFAULT_BASE_URL = "https://api.worksheet.systems";
class ConfigService {
    constructor() {
        this.CONFIG_FILE_PATH = path__default["default"].resolve(process.cwd(), `${CONFIG_DIRNAME}/config.json`);
    }
    save(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const prev = yield this.get();
            const c = Object.assign(Object.assign({}, prev), config);
            try {
                yield fs.writeFile(this.CONFIG_FILE_PATH, JSON.stringify(c, null, '\t'));
                this._config = c;
                return c;
            }
            catch (e) {
                console.error(e);
            }
        });
    }
    get(prop) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._config) {
                try {
                    yield createDirectory(this.CONFIG_FILE_PATH);
                    const f = yield fs.readFile(this.CONFIG_FILE_PATH);
                    const config = JSON.parse(f.toString());
                    this._config = config;
                }
                catch (e) {
                    this._config = {};
                }
            }
            if (typeof prop === 'string') {
                let value = this._config[prop];
                if (prop === 'baseUrl' && !value) {
                    value = DEFAULT_BASE_URL;
                }
                return value;
            }
            return this._config;
        });
    }
}
const configService = new ConfigService();class AuthService {
    constructor() {
        this.SECURITY_URL = `/authentication`;
        this.TOKEN_PATH = path__default["default"].resolve(`./${CONFIG_DIRNAME}/token.txt`);
    }
    authenticate() {
        return __awaiter(this, void 0, void 0, function* () {
            const isAuth = yield this.isAuth();
            if (isAuth) {
                return true;
            }
            return this.login();
        });
    }
    getAuthHeaders() {
        return {
            Authorization: `Bearer ${this.token}`,
        };
    }
    getCurrentToken() {
        return this.token;
    }
    isAuth() {
        return __awaiter(this, void 0, void 0, function* () {
            const token = yield this.getToken();
            if (token) {
                try {
                    return this.isTokenValid();
                }
                catch (e) {
                    return false;
                }
            }
            else {
                return false;
            }
        });
    }
    getToken() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const token = yield fs.readFile(this.TOKEN_PATH);
                this.token = token.toString();
                return this.token;
            }
            catch (e) {
                console.log("Local token token does not exist. Please login.");
            }
        });
    }
    getCredentials(username, password) {
        username = username !== null && username !== void 0 ? username : readline__default["default"].question("Enter Username:");
        password =
            password !== null && password !== void 0 ? password : readline__default["default"].question("Enter Password:", {
                hideEchoBack: true,
            });
        return { username, password };
    }
    login(username, password) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const baseUrl = yield configService.get("baseUrl");
                if (!baseUrl) {
                    throw new Error("Set baseUrl to work with worksheets-cli!");
                }
                const cred = this.getCredentials(username, password);
                const res = yield axios__default["default"].post(`${baseUrl}${this.SECURITY_URL}/authenticate`, cred);
                if (res.data.token) {
                    this.printUser(res.data.user);
                    yield createDirectory(this.TOKEN_PATH);
                    yield fs.writeFile(this.TOKEN_PATH, res.data.token);
                    this.token = res.data.token;
                    return true;
                }
                return false;
            }
            catch (e) {
                console.warn(e.message);
                return false;
            }
        });
    }
    simpleLogin(username, password) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const baseUrl = DEFAULT_BASE_URL;
                const res = yield axios__default["default"].post(`${baseUrl}${this.SECURITY_URL}/authenticate`, { username, password });
                if (res.data.token) {
                    this.token = res.data.token;
                    return res.data.token;
                }
                return null;
            }
            catch (e) {
                console.warn(e.message);
                return null;
            }
        });
    }
    isTokenValid() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const baseUrl = yield configService.get("baseUrl");
                const res = yield axios__default["default"].get(`${baseUrl}${this.SECURITY_URL}/user`, {
                    headers: this.getAuthHeaders(),
                });
                this.printUser(res.data);
                return true;
            }
            catch (e) {
                console.log("Local token token is invalid. Please login");
                return false;
            }
        });
    }
    printUser(user) {
        const { firstName, lastName, email } = user;
        console.log(`You authorized as ${firstName} ${lastName} (${email})`);
    }
}
const authService = new AuthService();class AppService {
    constructor() {
        this.APP_DEF_URL = `/api/app-definitions`;
        createDirectory(this.hashFilePath);
    }
    get hashFilePath() {
        return `${CONFIG_DIRNAME}/${this.ownerName}-${this.appName}-hash.json`;
    }
    get appDirPath() {
        return path__default["default"].resolve(process.cwd(), this.appDir);
    }
    get appDir() {
        return `${APP_DIRNAME}`;
    }
    getFilePath(link) {
        var _a;
        const p = `${APP_DIRNAME}/${(_a = link.folder) !== null && _a !== void 0 ? _a : ''}/${link.name}.${link.contentType}`;
        return path__default["default"].relative(process.cwd(), path__default["default"].resolve(process.cwd(), p).normalize());
    }
    getAbsFilePath(link) {
        var _a;
        const p = `${APP_DIRNAME}/${(_a = link.folder) !== null && _a !== void 0 ? _a : ''}/${link.name}.${link.contentType}`;
        return path__default["default"].resolve(process.cwd(), p).normalize();
    }
    getHashCode(content) {
        const hash = md5__default["default"](content);
        return hash.toString();
    }
    setAppInfo(ownerName, appName) {
        this.ownerName = ownerName !== null && ownerName !== void 0 ? ownerName : readline__default["default"].question('Enter App Owner:');
        this.appName = appName !== null && appName !== void 0 ? appName : readline__default["default"].question(`Enter App Name (Owner=${this.ownerName}):`);
    }
    saveHashCodes(hashes) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = hashes.reduce((prev, item) => {
                return Object.assign(Object.assign({}, prev), item);
            }, {});
            yield fs.writeFile(this.hashFilePath, JSON.stringify(res, null, '\t'));
        });
    }
    getHashCodes() {
        return __awaiter(this, void 0, void 0, function* () {
            const hashesStr = yield fs.readFile(this.hashFilePath);
            return JSON.parse(hashesStr.toString());
        });
    }
    getAppDefUrl() {
        return __awaiter(this, void 0, void 0, function* () {
            const baseUrl = yield configService.get('baseUrl');
            return `${baseUrl}${this.APP_DEF_URL}`;
        });
    }
}class AppPullservice extends AppService {
    loadApp(ownerName, appName) {
        return __awaiter(this, void 0, void 0, function* () {
            this.setAppInfo(ownerName, appName);
            yield createDirectory(this.hashFilePath);
            yield removeDir(this.appDirPath);
            const appDefUrl = yield this.getAppDefUrl();
            const url = `${appDefUrl}/app-links/${this.ownerName}/${this.appName}`;
            try {
                const res = yield axios__default["default"].get(url, {
                    headers: authService.getAuthHeaders()
                });
                const links = res.data;
                const hashes = yield Promise.all(links.map((l) => __awaiter(this, void 0, void 0, function* () {
                    const linkContent = yield this.loadFile(l);
                    return yield this.saveFile(linkContent);
                })));
                yield this.saveHashCodes(hashes);
                console.log(`Application ${this.ownerName}.${this.appName} loaded (${this.appDirPath}).`);
            }
            catch (e) {
                console.log(e.message);
            }
        });
    }
    loadFile(c) {
        return __awaiter(this, void 0, void 0, function* () {
            const appDefUrl = yield this.getAppDefUrl();
            const url = `${appDefUrl}/get-app-content`;
            const data = {
                contentType: c.contentType,
                folder: c.folder,
                name: c.name,
                appName: this.appName,
                appOwnerName: this.ownerName
            };
            const res = yield axios__default["default"].post(url, data, {
                headers: authService.getAuthHeaders()
            });
            return res.data;
        });
    }
    saveFile(link) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = this.getAbsFilePath(link);
            try {
                yield createDirectory(path);
                yield fs.writeFile(path, link.content || '');
                console.log(`File loaded: ${path}`);
                return { [this.getFilePath(link)]: {
                        hash: this.getHashCode(link.content),
                        contentId: link.contentId
                    } };
            }
            catch (e) {
                console.log(e);
            }
        });
    }
}
const appPullService = new AppPullservice();class AppPushservice extends AppService {
    constructor() {
        super();
        createDirectory(this.hashFilePath);
    }
    pushApp(ownerName, appName) {
        return __awaiter(this, void 0, void 0, function* () {
            this.setAppInfo(ownerName, appName);
            try {
                const files = (yield this.getLocalAppFiles()).flat(Infinity);
                const hashes = yield this.getHashCodes();
                yield this.deleteFiles(files, hashes);
                const filesToPush = files.filter(f => {
                    var _a;
                    const p = this.getFilePath(f);
                    return ((_a = hashes[p]) === null || _a === void 0 ? void 0 : _a.hash) !== this.getHashCode(f.content);
                });
                yield Promise.all(filesToPush.map((fP) => __awaiter(this, void 0, void 0, function* () {
                    const pathHash = yield this.saveFile(fP);
                    const filePath = this.getFilePath(fP);
                    const f = files.find(f => filePath === this.getFilePath(f));
                    f.contentId = pathHash[filePath].contentId;
                })));
                yield this.saveHashCodes(files.map(f => ({ [this.getFilePath(f)]: {
                        hash: this.getHashCode(f.content),
                        contentId: f.contentId
                    } })));
                const appDefUrl = yield this.getAppDefUrl();
                console.log(`Application ${this.ownerName}.${this.appName} loaded (${appDefUrl}).`);
            }
            catch (e) {
                console.log(e.message);
            }
        });
    }
    deleteFiles(files, hashes) {
        return __awaiter(this, void 0, void 0, function* () {
            const filesMap = new Map(files.map(f => ([this.getFilePath(f), f])));
            yield Promise.all(Object.keys(hashes)
                .filter(fPath => !filesMap.has(fPath))
                .map(fPath => this.deleteFile(this.getAppLink(fPath))));
        });
    }
    deleteFile(link) {
        return __awaiter(this, void 0, void 0, function* () {
            const appDefUrl = yield this.getAppDefUrl();
            const url = `${appDefUrl}/delete-app-content`;
            const res = yield axios__default["default"].post(url, Object.assign(Object.assign({}, link), { appOwnerName: this.ownerName, appName: this.appName }), {
                headers: authService.getAuthHeaders()
            });
            console.log(`${this.getFilePath(link)} - deleted`, res.status);
            return res.data;
        });
    }
    getLocalAppFiles(dir = this.appDirPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const hashes = yield this.getHashCodes();
            const list = yield fs__default["default"].readdir(dir);
            return yield Promise.all(list.map((file) => __awaiter(this, void 0, void 0, function* () {
                file = path__default["default"].resolve(dir, file);
                const stat = yield fs__default["default"].stat(file);
                if (stat && stat.isDirectory()) {
                    return this.getLocalAppFiles(file);
                }
                else {
                    return this.getAppLinkWithContent(dir, file, hashes);
                }
            })));
        });
    }
    getAppLinkWithContent(dir, fPath, hashes) {
        return __awaiter(this, void 0, void 0, function* () {
            let folder = removeStartingSlash(dir.replace(this.appDirPath, '')).replace(/\\/g, '/');
            let [name, ...extention] = path__default["default"].basename(fPath).split('.');
            const content = (yield fs__default["default"].readFile(fPath)).toString();
            const appLink = {
                name: removeStartingSlash(name),
                folder,
                contentType: extention.join('.'),
                content
            };
            if (hashes[this.getFilePath(appLink)]) {
                appLink.contentId = hashes[this.getFilePath(appLink)].contentId;
            }
            return appLink;
        });
    }
    getAppLink(filePath) {
        const fPath = filePath.replace(this.appDir, '');
        const src = fPath.split('/');
        const file = src.pop();
        const dotIndex = file.indexOf('.');
        const contentType = file.substring(dotIndex + 1);
        const name = file.substring(0, dotIndex);
        const folder = src.join('/');
        const appLink = {
            name,
            folder,
            contentType
        };
        return appLink;
    }
    saveFile(link) {
        return __awaiter(this, void 0, void 0, function* () {
            const appDefUrl = yield this.getAppDefUrl();
            const url = `${appDefUrl}/save-app-content`;
            const appLink = this.getSaveAppLink(link);
            try {
                const res = yield axios__default["default"].post(url, appLink, {
                    headers: authService.getAuthHeaders()
                });
                const path = this.getFilePath(link);
                const status = link.contentId ? 'saved' : 'created';
                console.log(`${path} - ${status}`, res.status);
                return { [path]: {
                        hash: this.getHashCode(link.content),
                        contentId: res.data
                    } };
            }
            catch (e) {
                console.log(e.message);
            }
        });
    }
    getSaveAppLink(link) {
        const saveLink = {
            appOwnerName: this.ownerName,
            appName: this.appName,
            appContent: {
                contentType: link.contentType,
                folder: link.folder,
                name: link.name
            }
        };
        if (link.content) {
            saveLink.appContent.content = link.content;
        }
        if (link.contentId) {
            saveLink.appContent.contentId = link.contentId;
        }
        return saveLink;
    }
}
const appPushService = new AppPushservice();require('dotenv').config();
console.log('Worksheets CLI (c) 2021 FalconSoft Ltd. All rights reserved.');
const commands = ['auth', 'pull', 'push', 'config'];
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        let argv = getArgv();
        const argComangs = argv._;
        const useMessage = `Use one of the commands: ${commands.join(', ')}`;
        if (argComangs.length === 0 && argv.version) {
            const version = require('../package.json').version;
            console.log(version);
            process.exit();
        }
        if (argComangs.length !== 1 || !commands.includes(argComangs[0])) {
            console.log(useMessage);
            process.exit();
        }
        switch (argComangs[0]) {
            case 'auth':
                yield authService.login(argv.username, argv.password);
                break;
            case 'pull':
                yield pull(argv);
                break;
            case 'push':
                yield push(argv);
                break;
            case 'config':
                yield config(argv);
                break;
            default: console.log(`Incorrect command ${argComangs[0]}. ${useMessage}`);
        }
        process.exit();
    });
}
function getConfig(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!argv.app) {
            const config = yield configService.get();
            if (config.owner && config.app) {
                console.log(`Application: ${config.owner}/${config.app}`);
            }
            return config;
        }
        else {
            const [owner, app] = argv.app.split('/');
            return yield configService.save({ owner, app });
        }
    });
}
function pull(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        const isAuth = yield authService.authenticate();
        if (isAuth) {
            const config = yield getConfig(argv);
            yield appPullService.loadApp(config.owner, config.app);
        }
        else {
            console.log('Login to be able to pull apps.');
        }
    });
}
function push(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        const isAuth = yield authService.authenticate();
        if (isAuth) {
            const config = yield getConfig(argv);
            yield appPushService.pushApp(config.owner, config.app);
        }
        else {
            console.log('Login to be able to push apps.');
        }
    });
}
function getArgv() {
    return yargs__default["default"]
        .option('version', {
        alias: 'v',
        description: 'Application version',
        type: 'boolean'
    })
        .command('auth', "Authenticate.", (yargs) => yargs.option('username', {
        alias: 'u',
        describe: "Username in worksheet.systems",
        type: 'string'
    }).option('password', {
        alias: 'p',
        hidden: true,
        type: 'string'
    })).command('pull', "Pull application.", (yargs) => yargs.option('app', {
        alias: 'a',
        describe: 'Application name (Owner/AppName)',
        type: 'string'
    })).command('push', "Push application.", (yargs) => yargs.option('app', {
        alias: 'a',
        describe: 'Application name (Owner/AppName)',
        type: 'string'
    })).command('config', "Set configurations.", (yargs) => yargs.option('baseUrl', {
        describe: 'Worksheets API url.',
        type: 'string'
    }).option('app', {
        alias: 'a',
        describe: 'Application name (Owner/AppName)',
        type: 'string'
    })).argv;
}
function config(argv) {
    return __awaiter(this, void 0, void 0, function* () {
        const config = {};
        if (argv.baseUrl) {
            config.baseUrl = argv.baseUrl;
        }
        if (argv.app) {
            const [owner, app] = argv.app.split('/');
            config.app = app;
            config.owner = owner;
        }
        yield configService.save(config);
        console.log('Configurations updated.');
    });
}
try {
    main();
}
catch (e) {
    console.log(e.message);
}